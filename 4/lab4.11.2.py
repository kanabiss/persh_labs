import numpy as np
from math import sqrt

# Возвращает сумму всех делителей числа num
# Если не поймешь, как работает эта функция, скажи, что взял из какой-то книги по алгоритмам или еще шо-нить
# Параметры:
#	num - число, сумма делителей которого будет возвращена
def get_sum_of_divisors(num):
	sum = 1			# Все натуральные числа делятся на 1, поэтому сумма изначала равна 1
	dlim = sqrt(num)	# Квадратный корень из числа
	d = 2			# Делитель
	while(d <= dlim):
		if(num % d == 0):	# Если число делится без остатка на этот делитель, значит, это делитель(lol)
			sum += d	# Прибавляем его к сумме
			if(d != num / d):	# Но т.к. мы перебираем все числа до квадратного корня из числа, значит, двух предыдыщих строк будет мало
						# Нужно еще проверить, мб этот делитель даст еще один делитель, например, возьмем число 30
						# максимальное d = 5.477.., но 30 делится и на 6, и на 10, и на 15
						# при d = 2 попробуем разделить 30 на 2, получится 15, это тоже делитель, добавляем его к сумме
				sum += num/d
		d += 1
	return int(sum)	# У нас везде целые числа, для ясности явно преобразуем, т.к. после деления python сделает их вещественными

# Первые совершенные числа - это 6 и 28
# Создадим массив из последовательного промежутка чисел от 2 до 28
a = np.array([i+2 for i in range(27)])
b = np.copy(a)	# Создадим копую, чтобы потом красиво вывести изначальный массив

for i in range(27):
	sum = get_sum_of_divisors(b[i])	# Получим сумму делителей для i-того элемента массива
	if(sum != b[i]):		# Если сумма делителей не равна числу, тогда вместо числа записываем сумму делителей
		b[i] = sum

# Выводим исходный и измененный массивы
print("source\tchanged")
for i in range(27):
	print(a[i], end='\t')
	print(b[i])
